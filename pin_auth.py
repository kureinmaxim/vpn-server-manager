import json
import os
from datetime import datetime, timedelta
from flask import session, redirect, url_for
from flask_babel import gettext

class PinAuth:
    def __init__(self, config_file=None):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ config.json
        if config_file is None:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø—É—Ç—å, —á—Ç–æ –∏ –≤ app.py
            import sys
            import os
            from pathlib import Path
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ –ø–∞–∫–µ—Ç
            is_frozen = getattr(sys, 'frozen', False)
            
            # –ò–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app_name = "VPNServerManager"
            
            if is_frozen:  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∫–∞–∫ .app –∏–ª–∏ .exe
                if sys.platform == 'darwin':  # macOS
                    app_data_dir = os.path.join(
                        os.path.expanduser("~"), 
                        "Library", "Application Support", 
                        app_name
                    )
                elif sys.platform == 'win32':  # Windows
                    app_data_dir = os.path.join(
                        os.environ.get('APPDATA', os.path.expanduser("~")),
                        app_name
                    )
                else:  # Linux –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã
                    app_data_dir = os.path.join(
                        os.path.expanduser("~"),
                        ".local", "share",
                        app_name
                    )
            else:
                # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
                app_data_dir = os.path.join(os.getcwd())
            
            self.config_file = os.path.join(app_data_dir, 'config.json')
        else:
            self.config_file = config_file
            
        self.pin_attempts = 0
        self.pin_blocked_until = None
        self.pin_block_duration = 30  # —Å–µ–∫—É–Ω–¥
    
    def get_secret_pin(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π PIN –∏–∑ config.json."""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Flask app.config
            from flask import current_app
            try:
                if current_app and 'secret_pin' in current_app.config:
                    return current_app.config['secret_pin'].get('current_pin', '1234')
            except:
                pass
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, —á–∏—Ç–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            return config.get('secret_pin', {}).get('current_pin', '1234')
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PIN –∏–∑ config.json: {e}")
            return '1234'
    
    def is_pin_login_blocked(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –≤—Ö–æ–¥ –ø–æ PIN."""
        if self.pin_blocked_until is None:
            return False
        
        now = datetime.now()
        if now >= self.pin_blocked_until:
            self.pin_blocked_until = None
            self.pin_attempts = 0
            return False
        
        return True
    
    def get_pin_block_remaining(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
        if not self.is_pin_login_blocked():
            return 0
        
        now = datetime.now()
        remaining = (self.pin_blocked_until - now).total_seconds()
        return max(0, int(remaining))
    
    def block_pin_login(self):
        """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥ –ø–æ PIN –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."""
        self.pin_blocked_until = datetime.now() + timedelta(seconds=self.pin_block_duration)
        print(f"üîí –í—Ö–æ–¥ –ø–æ PIN –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {self.pin_block_duration} —Å–µ–∫—É–Ω–¥")
    
    def authenticate_pin(self, pin):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ PIN-–∫–æ–¥ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–±–æ—Ä–∞."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if self.is_pin_login_blocked():
                remaining = self.get_pin_block_remaining()
                print(f"üîí –í—Ö–æ–¥ –ø–æ PIN –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –æ—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–µ–∫—É–Ω–¥")
                return False, f"–í—Ö–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {remaining} —Å–µ–∫—É–Ω–¥"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π PIN
            current_pin = self.get_secret_pin()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PIN-–∫–æ–¥
            if pin == current_pin:
                # –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                self.pin_attempts = 0
                self.pin_blocked_until = None
                
                session['pin_authenticated'] = True
                session['pin_login_used'] = True
                print("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ PIN —É—Å–ø–µ—à–Ω–∞")
                return True, gettext("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            else:
                # –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                self.pin_attempts += 1
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π PIN-–∫–æ–¥ (–ø–æ–ø—ã—Ç–∫–∞ {self.pin_attempts})")
                
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                if self.pin_attempts >= 1:
                    self.block_pin_login()
                    return False, f"–ù–µ–≤–µ—Ä–Ω—ã–π PIN-–∫–æ–¥. –í—Ö–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {self.pin_block_duration} —Å–µ–∫—É–Ω–¥"
                
                return False, "–ù–µ–≤–µ—Ä–Ω—ã–π PIN-–∫–æ–¥"
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ authenticate_pin: {e}")
            return False, f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}"
    
    def change_pin(self, old_pin, new_pin):
        """–°–º–µ–Ω—è–µ—Ç PIN-–∫–æ–¥."""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π PIN
            current_pin = config.get('secret_pin', {}).get('current_pin', '1234')
            if old_pin != current_pin:
                return False, "–°—Ç–∞—Ä—ã–π PIN –Ω–µ–≤–µ—Ä–µ–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π PIN
            if not new_pin or len(new_pin) < 4:
                return False, "–ù–æ–≤—ã–π PIN –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞"
            
            if new_pin == old_pin:
                return False, "–ù–æ–≤—ã–π PIN –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if 'secret_pin' not in config:
                config['secret_pin'] = {}
            
            config['secret_pin']['current_pin'] = new_pin
            config['secret_pin']['last_changed'] = datetime.now().strftime('%Y-%m-%d')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Flask app.config
            try:
                from flask import current_app
                if current_app:
                    current_app.config['secret_pin'] = config['secret_pin']
            except:
                pass
            
            return True, "PIN —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω"
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã PIN: {e}")
            return False, f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PIN: {e}"
    
    def change_pin_without_old(self, new_pin):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π PIN-–∫–æ–¥ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ (–¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)."""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π PIN
            if not new_pin or len(new_pin) < 4:
                return False, "PIN –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if 'secret_pin' not in config:
                config['secret_pin'] = {}
            
            config['secret_pin']['current_pin'] = new_pin
            config['secret_pin']['last_changed'] = datetime.now().strftime('%Y-%m-%d')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º Flask app.config
            try:
                from flask import current_app
                if current_app:
                    current_app.config['secret_pin'] = config['secret_pin']
            except:
                pass
            
            return True, "PIN —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PIN: {e}")
            return False, f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PIN: {e}"
    
    def is_authenticated(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ PIN."""
        return session.get('pin_authenticated', False)
    
    def require_auth(self, f):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤."""
        def decorated(*args, **kwargs):
            if not self.is_authenticated():
                return redirect(url_for('index'))
            return f(*args, **kwargs)
        decorated.__name__ = f.__name__
        return decorated

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
pin_auth = PinAuth() 