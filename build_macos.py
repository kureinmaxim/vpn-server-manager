#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ VPN Server Manager —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏.
–í–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞ –∏ —É–ª—É—á—à–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫.
"""
import os
import sys
import shutil
import subprocess
from pathlib import Path
from dotenv import load_dotenv
import json
from datetime import datetime

# –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
PROJECT_ROOT = Path.cwd()
DIST_DIR = PROJECT_ROOT / 'dist'
BUILD_DIR = PROJECT_ROOT / 'build'

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
DIST_DIR.mkdir(exist_ok=True)
BUILD_DIR.mkdir(exist_ok=True)

def cleanup_previous_builds():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫"""
    if DIST_DIR.exists():
        shutil.rmtree(DIST_DIR, ignore_errors=True)
    if BUILD_DIR.exists():
        shutil.rmtree(BUILD_DIR, ignore_errors=True)
    print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def convert_ico_to_icns():
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è favicon.ico –≤ icon.icns –¥–ª—è macOS"""
    favicon_path = PROJECT_ROOT / "static" / "images" / "icon_clean.ico"
    icns_path = PROJECT_ROOT / "static" / "images" / "icon_clean.icns"
    
    if not favicon_path.exists():
        print("‚ùå icon_clean.ico –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    temp_dir = PROJECT_ROOT / "temp_icons"
    temp_dir.mkdir(exist_ok=True)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º sips –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ macOS)
        # –°–Ω–∞—á–∞–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
        sizes = [16, 32, 64, 128, 256, 512]
        
        for size in sizes:
            png_path = temp_dir / f"icon_{size}.png"
            subprocess.run([
                "sips", "-s", "format", "png", 
                str(favicon_path), "--out", str(png_path),
                "-z", str(size), str(size)
            ], check=True)
        
        # –°–æ–∑–¥–∞–µ–º .iconset –ø–∞–ø–∫—É
        iconset_path = temp_dir / "icon.iconset"
        iconset_path.mkdir(exist_ok=True)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç iconset
        icon_mapping = {
            16: "icon_16x16.png",
            32: "icon_16x16@2x.png",
            32: "icon_32x32.png", 
            64: "icon_32x32@2x.png",
            128: "icon_128x128.png",
            256: "icon_128x128@2x.png",
            256: "icon_256x256.png",
            512: "icon_256x256@2x.png",
            512: "icon_512x512.png",
            1024: "icon_512x512@2x.png"
        }
        
        for size, filename in icon_mapping.items():
            if size <= 512:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑ favicon
                src = temp_dir / f"icon_{size}.png"
                dst = iconset_path / filename
                if src.exists():
                    shutil.copy2(src, dst)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º iconset –≤ icns
        subprocess.run([
            "iconutil", "-c", "icns", str(iconset_path), "-o", str(icns_path)
        ], check=True)
        
        print(f"‚úÖ icon_clean.ico –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {icns_path}")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if temp_dir.exists():
            shutil.rmtree(temp_dir)

def build_app():
    """–°–æ–∑–¥–∞–Ω–∏–µ .app —Ñ–∞–π–ª–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∫–æ–Ω–∫–∏
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∫–æ–Ω–∫–∏...")
    icon_path = PROJECT_ROOT / "static" / "images" / "icon_clean.png"
    if icon_path.exists():
        print("‚úÖ –ò–∫–æ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞")
    else:
        print("‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–±–æ—Ä–∫—É
    datas = [
        "templates:templates",          # HTML —à–∞–±–ª–æ–Ω—ã
        "static:static",                # CSS, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        "config.json:.",                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        "data:data",                    # –î–∞–Ω–Ω—ã–µ
        
        "requirements.txt:.",           # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    additional_files = [
        "ai_services_schema.json",
        "env.example",
        "yubikey_auth.py",
        "security_logger.py",
        "decrypt_tool.py",
        "generate_key.py"
    ]
    
    for file in additional_files:
        if Path(file).exists():
            datas.append(f"{file}:.")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è PyInstaller
    datas_args = [f"--add-data={data}" for data in datas]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∫–æ–Ω–∫–∏
    icon_path = PROJECT_ROOT / "static" / "images" / "icon_clean.icns"
    if not icon_path.exists():
        # –ï—Å–ª–∏ –Ω–µ—Ç .icns —Ñ–∞–π–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º .png
        icon_path = PROJECT_ROOT / "static" / "images" / "icon_clean.png"
    icon_arg = f"--icon={icon_path}" if icon_path.exists() else ""
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–∫—Ä—ã—Ç—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è Flask –∏ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
    hidden_imports = [
        # Flask –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
        "--hidden-import=flask",
        "--hidden-import=flask.app",
        "--hidden-import=flask.blueprints",
        "--hidden-import=flask.cli",
        "--hidden-import=flask.config",
        "--hidden-import=flask.ctx",
        "--hidden-import=flask.debughelpers",
        "--hidden-import=flask.helpers",
        "--hidden-import=flask.json",
        "--hidden-import=flask.logging",
        "--hidden-import=flask.sessions",
        "--hidden-import=flask.signals",
        "--hidden-import=flask.templating",
        "--hidden-import=flask.testing",
        "--hidden-import=flask.views",
        
        # Werkzeug (WSGI —É—Ç–∏–ª–∏—Ç—ã)
        "--hidden-import=werkzeug",
        "--hidden-import=werkzeug.datastructures",
        "--hidden-import=werkzeug.debug",
        "--hidden-import=werkzeug.exceptions",
        "--hidden-import=werkzeug.filesystem",
        "--hidden-import=werkzeug.formparser",
        "--hidden-import=werkzeug.http",
        "--hidden-import=werkzeug.local",
        "--hidden-import=werkzeug.middleware",
        "--hidden-import=werkzeug.middleware.proxy_fix",
        "--hidden-import=werkzeug.middleware.shared_data",
        "--hidden-import=werkzeug.routing",
        "--hidden-import=werkzeug.security",
        "--hidden-import=werkzeug.serving",
        "--hidden-import=werkzeug.test",
        "--hidden-import=werkzeug.testapp",
        "--hidden-import=werkzeug.urls",
        "--hidden-import=werkzeug.utils",
        "--hidden-import=werkzeug.wrappers",
        "--hidden-import=werkzeug.wsgi",
        
        # Jinja2 (—à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä)
        "--hidden-import=jinja2",
        "--hidden-import=jinja2.async_utils",
        "--hidden-import=jinja2.bccache",
        "--hidden-import=jinja2.compiler",
        "--hidden-import=jinja2.debug",
        "--hidden-import=jinja2.defaults",
        "--hidden-import=jinja2.environment",
        "--hidden-import=jinja2.ext",
        "--hidden-import=jinja2.filters",
        "--hidden-import=jinja2.lexer",
        "--hidden-import=jinja2.loaders",
        "--hidden-import=jinja2.meta",
        "--hidden-import=jinja2.nativetypes",
        "--hidden-import=jinja2.nodes",
        "--hidden-import=jinja2.optimizer",
        "--hidden-import=jinja2.parser",
        "--hidden-import=jinja2.runtime",
        "--hidden-import=jinja2.sandbox",
        "--hidden-import=jinja2.tests",
        "--hidden-import=jinja2.utils",
        "--hidden-import=jinja2.visitor",
        
        # PyWebView (GUI)
        "--hidden-import=webview",
        "--hidden-import=webview.platforms.cocoa",
        "--hidden-import=webview.platforms.cef",
        "--hidden-import=webview.platforms.gtk",
        "--hidden-import=webview.platforms.winforms",
        "--hidden-import=webview.platforms.edgechromium",
        "--hidden-import=webview.platforms.edgehtml",
        "--hidden-import=webview.platforms.mshtml",
        "--hidden-import=webview.platforms.qt",
        
        # –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        "--hidden-import=cryptography",
        "--hidden-import=cryptography.fernet",
        "--hidden-import=cryptography.hazmat",
        "--hidden-import=cryptography.hazmat.primitives",
        "--hidden-import=cryptography.hazmat.primitives.ciphers",
        "--hidden-import=cryptography.hazmat.primitives.hashes",
        "--hidden-import=cryptography.hazmat.primitives.kdf",
        "--hidden-import=cryptography.hazmat.primitives.asymmetric",
        "--hidden-import=cryptography.hazmat.primitives.serialization",
        
        # –°–µ—Ç–µ–≤—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
        "--hidden-import=requests",
        "--hidden-import=urllib3",
        "--hidden-import=urllib3.util",
        "--hidden-import=urllib3.exceptions",
        "--hidden-import=requests.adapters",
        "--hidden-import=requests.auth",
        "--hidden-import=requests.cookies",
        "--hidden-import=requests.models",
        "--hidden-import=requests.sessions",
        "--hidden-import=requests.structures",
        "--hidden-import=requests.utils",
        "--hidden-import=socket",
        "--hidden-import=urllib.parse",
        
        # –î—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –º–æ–¥—É–ª–∏
        "--hidden-import=python-dotenv",
        "--hidden-import=threading",
        "--hidden-import=subprocess",
        "--hidden-import=signal",
        "--hidden-import=logging",
        "--hidden-import=re",
        "--hidden-import=uuid",
        "--hidden-import=copy",
        "--hidden-import=shutil",
        "--hidden-import=tempfile",
        "--hidden-import=zipfile",
        "--hidden-import=base64",
        "--hidden-import=datetime",
        "--hidden-import=pathlib",
        "--hidden-import=json",
        "--hidden-import=os",
        "--hidden-import=sys",
        
        # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        "--exclude-module=PyQt6",
        "--exclude-module=PyQt5",
        "--exclude-module=PySide6",
        "--exclude-module=PySide2",
        "--exclude-module=_tkinter",
        "--exclude-module=tkinter",
        "--exclude-module=tcl",
        "--exclude-module=tk",
        "--exclude-module=matplotlib",
        "--exclude-module=numpy",
        "--exclude-module=pandas",
        "--exclude-module=scipy"
    ]
    
    # –ö–æ–º–∞–Ω–¥–∞ PyInstaller
    pyinstaller_cmd = [
        "python3",
        "-m", "PyInstaller",
        "--onedir",                     # –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
        "--windowed",                   # GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        "--name=VPNServerManager-Clean",
        icon_arg,                       # –ò–∫–æ–Ω–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        "--clean",
        "--noconfirm",
        "--distpath=dist",
        "--workpath=build",
        "--noupx",
        "--strip",
        "--osx-bundle-identifier=com.vpnservermanager.clean.app",
        "--debug=all",
        *datas_args,
        *hidden_imports,
        "app.py"  # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    ]
    
    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    pyinstaller_cmd = [arg for arg in pyinstaller_cmd if arg]
    
    print("üî® –ó–∞–ø—É—Å–∫ PyInstaller...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(pyinstaller_cmd)}")
    
    # –ó–∞–ø—É—Å–∫ PyInstaller
    result = subprocess.run(pyinstaller_cmd, capture_output=False, text=True)
    
    if result.returncode != 0:
        print(f"‚ùå –û–®–ò–ë–ö–ê: PyInstaller –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {result.returncode}")
        return False
    
    return True

def create_app_bundle():
    """–°–æ–∑–¥–∞–Ω–∏–µ .app –±–∞–Ω–¥–ª–∞ –¥–ª—è macOS"""
    app_name = "VPNServerManager-Clean"  # –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª–∞—Å—å –ª–∏ –ø–∞–ø–∫–∞ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    app_dir = DIST_DIR / app_name
    
    if app_dir.exists():
        print(f"‚úÖ –ü–∞–ø–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: {app_dir}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ .app —Ñ–∞–π–ª
        app_path = DIST_DIR / f"{app_name}.app"
        
        if app_path.exists():
            print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {app_path}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ–ø–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            icon_path = app_path / "Contents" / "Resources" / "AppIcon.icns"
            if not icon_path.exists():
                source_icon = PROJECT_ROOT / "static" / "images" / "icon_clean.png"
                if source_icon.exists():
                    shutil.copy2(source_icon, icon_path)
                    print(f"üìÅ –ò–∫–æ–Ω–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: {source_icon}")
            return app_path
        
        # –°–æ–∑–¥–∞–µ–º .app –±–∞–Ω–¥–ª –∏–∑ –ø–∞–ø–∫–∏
        app_contents = app_path / "Contents"
        app_macos = app_contents / "MacOS"
        app_resources = app_contents / "Resources"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        app_macos.mkdir(parents=True, exist_ok=True)
        app_resources.mkdir(parents=True, exist_ok=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        shutil.copytree(app_dir, app_macos / app_name, dirs_exist_ok=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ config.json
        version = get_version_from_config()
        
        # –°–æ–∑–¥–∞–µ–º Info.plist —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
        info_plist_content = f"""<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleExecutable</key>
    <string>{app_name}</string>
    <key>CFBundleIdentifier</key>
    <string>com.vpnservermanager.clean.app</string>
    <key>CFBundleName</key>
    <string>{app_name}</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleShortVersionString</key>
    <string>{version}</string>
    <key>CFBundleVersion</key>
    <string>{version}</string>
    <key>LSMinimumSystemVersion</key>
    <string>10.14</string>
    <key>NSHighResolutionCapable</key>
    <true/>
    <key>CFBundleIconFile</key>
    <string>AppIcon.icns</string>
</dict>
</plist>"""
        
        with open(app_contents / "Info.plist", "w") as f:
            f.write(info_plist_content)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        icon_path = PROJECT_ROOT / "static" / "images" / "icon_clean.png"
        if icon_path.exists():
            shutil.copy2(icon_path, app_resources / "AppIcon.icns")
            print(f"üìÅ –ò–∫–æ–Ω–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: {icon_path}")
        else:
            print("‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {app_path}")
        return app_path
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ {app_dir}")
        return None

def create_readme():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ README.txt —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏"""
    readme_content = """# VPN Server Manager Clean

## –í–∞–∂–Ω–æ: –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫

–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ macOS –æ —Ç–æ–º, 
—á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–µ –∏–∑ App Store. –î–ª—è —Ä–µ—à–µ–Ω–∏—è:

1. –í Finder —â–µ–ª–∫–Ω–∏—Ç–µ –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ (–∏–ª–∏ Control+–∫–ª–∏–∫)
2. –í—ã–±–µ—Ä–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å" –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –º–µ–Ω—é
3. –í –ø–æ—è–≤–∏–≤—à–µ–º—Å—è –¥–∏–∞–ª–æ–≥–µ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å"
4. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π

## –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∞—à–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:
~/Library/Application Support/VPNServerManager-Clean/

–í —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è:
- –§–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
- –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–æ–≤
- –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —á–µ–∫–∏ –∏ –∏–∫–æ–Ω–∫–∏

## –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é:
~/Library/Application Support/VPNServerManager-Clean/

## –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—É—Å–∫–æ–º

–ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:
1. –ù–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ .env —Å –∫–ª—é—á–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
2. –ù–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö

–î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.

## –û—Ç–ª–∏—á–∏–µ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞

–≠—Ç–æ –≤–µ—Ä—Å–∏—è "Clean" - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è VPN Server Manager 
—Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π, —Ä—É—Å—Å–∫–∏–π, –∫–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫–∏).
"""
    
    readme_path = DIST_DIR / "README.txt"
    with open(readme_path, "w", encoding='utf-8') as f:
        f.write(readme_content)
    
    return readme_path

def create_dmg(app_path):
    """–°–æ–∑–¥–∞–Ω–∏–µ DMG –æ–±—Ä–∞–∑–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è"""
    app_name = app_path.name.split('.')[0]
    dmg_name = f"{app_name}_Installer.dmg"
    dmg_path = DIST_DIR / dmg_name
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π DMG –µ—Å–ª–∏ –µ—Å—Ç—å
    if dmg_path.exists():
        dmg_path.unlink()
    
    # –°–æ–∑–¥–∞–µ–º README —Ñ–∞–π–ª
    readme_path = create_readme()
    
    try:
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ DMG –æ–±—Ä–∞–∑–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        tmp_dir = DIST_DIR / "tmp_dmg"
        if tmp_dir.exists():
            shutil.rmtree(tmp_dir)
        tmp_dir.mkdir(parents=True)
        
        # –ö–æ–ø–∏—Ä—É–µ–º .app –≤ —ç—Ç—É –ø–∞–ø–∫—É
        shutil.copytree(app_path, tmp_dir / app_path.name)
        
        # –ö–æ–ø–∏—Ä—É–µ–º README.txt
        shutil.copy(readme_path, tmp_dir / "README.txt")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–º–≤–æ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Applications
        os.symlink('/Applications', tmp_dir / 'Applications')
        
        # –°–æ–∑–¥–∞–µ–º DMG
        subprocess.run([
            'hdiutil', 'create', '-volname', app_name, 
            '-srcfolder', str(tmp_dir), 
            '-ov', '-format', 'UDZO', str(dmg_path)
        ], check=True)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        shutil.rmtree(tmp_dir)
        
        print(f"‚úÖ DMG –æ–±—Ä–∞–∑ —Å–æ–∑–¥–∞–Ω: {dmg_path}")
        return dmg_path
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DMG: {e}")
        return None

def diagnose_app(app_path):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    if not app_path.exists():
        print("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    try:
        # –ò—â–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –≤ —Ä–∞–∑–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        possible_executables = [
            app_path / "Contents" / "MacOS" / "VPNServerManager-Clean" / "VPNServerManager-Clean",
            app_path / "Contents" / "MacOS" / "VPNServerManager-Clean",
            app_path / "Contents" / "MacOS" / "app",
            app_path / "Contents" / "MacOS" / "VPNServerManager-Clean.app" / "VPNServerManager-Clean"
        ]
        
        executable_path = None
        for exec_path in possible_executables:
            if exec_path.exists():
                executable_path = exec_path
                break
        
        if executable_path:
            os.chmod(executable_path, 0o755)
            print(f"‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è: {executable_path.name}")
        else:
            print("‚ö†Ô∏è –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ MacOS –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            macos_dir = app_path / "Contents" / "MacOS"
            if macos_dir.exists():
                print(f"üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ MacOS: {[f.name for f in macos_dir.iterdir()]}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        if executable_path and executable_path.exists():
            result = subprocess.run([
                "otool", "-L", str(executable_path)
            ], capture_output=True, text=True)
            print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Info.plist
    info_plist = app_path / "Contents" / "Info.plist"
    if info_plist.exists():
        print("‚úÖ Info.plist –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå Info.plist –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∫–æ–Ω–∫—É
    icon_path = app_path / "Contents" / "Resources" / "AppIcon.icns"
    if icon_path.exists():
        print("‚úÖ –ò–∫–æ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞")
    else:
        print("‚ö†Ô∏è –ò–∫–æ–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_dir = app_path / "Contents" / "MacOS" / "VPNServerManager-Clean"
    if not app_dir.exists():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
        alt_paths = [
            app_path / "Contents" / "MacOS",
            app_path / "Contents" / "MacOS" / "app",
            app_path / "Contents" / "MacOS" / "VPNServer-Clean.app"
        ]
        for alt_path in alt_paths:
            if alt_path.exists():
                app_dir = alt_path
                break
    
    if app_dir.exists():
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
        try:
            if app_dir.is_file():
                # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª (–∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π), —Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                size = sum(f.stat().st_size for f in app_path.rglob('*') if f.is_file())
                print(f"üìä –†–∞–∑–º–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {size / 1024 / 1024:.1f} MB")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
                file_count = len([f for f in app_path.rglob('*') if f.is_file()])
                print(f"üìÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {file_count}")
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, —Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞–∫ —Ä–∞–Ω—å—à–µ
                size = sum(f.stat().st_size for f in app_dir.rglob('*') if f.is_file())
                print(f"üìä –†–∞–∑–º–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {size / 1024 / 1024:.1f} MB")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
                file_count = len([f for f in app_dir.rglob('*') if f.is_file()])
                print(f"üìÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {file_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
                main_files = [f.name for f in app_dir.iterdir() if f.is_file()]
                if main_files:
                    print(f"üìÑ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã: {main_files[:5]}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ä–∞–∑–º–µ—Ä: {e}")
    else:
        print("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ Contents
        contents_dir = app_path / "Contents"
        if contents_dir.exists():
            print(f"üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ Contents: {[f.name for f in contents_dir.iterdir()]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º MacOS –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            macos_dir = contents_dir / "MacOS"
            if macos_dir.exists():
                print(f"üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ MacOS: {[f.name for f in macos_dir.iterdir()]}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ MacOS
                for item in macos_dir.iterdir():
                    if item.is_dir():
                        print(f"üìÇ –ü–∞–ø–∫–∞ {item.name}: {[f.name for f in item.iterdir()][:3]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
                    else:
                        print(f"üìÑ –§–∞–π–ª {item.name}")
    
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return True

def get_version_from_config():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ config.json"""
    try:
        config_path = PROJECT_ROOT / "config.json"
        if config_path.exists():
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
                return config.get('app_info', {}).get('version', '3.5.2')
        else:
            print("‚ö†Ô∏è config.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return '3.5.2'
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.json: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        return '3.5.2'

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏"""
    version = get_version_from_config()
    print(f"üöÄ –°–±–æ—Ä–∫–∞ VPN Server Manager v{version}")
    print("=====================================")
    print(f"üìÅ –ü—Ä–æ–µ–∫—Ç: {PROJECT_ROOT}")
    print(f"üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç: {DIST_DIR}")
    print()
    
    # –û—á–∏—Å—Ç–∫–∞
    cleanup_previous_builds()
    
    # –°–±–æ—Ä–∫–∞
    if build_app():
        print("‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ .app –±–∞–Ω–¥–ª–∞
        app_path = create_app_bundle()
        if app_path:
            print("üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            print(f"üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {DIST_DIR}")
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            diagnose_app(app_path)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ DMG –æ–±—Ä–∞–∑–∞
            print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–∞...")
            dmg_path = create_dmg(app_path)
            
            if dmg_path:
                print("üéâ –ò–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                print(f"üì¶ DMG —Ñ–∞–π–ª: {dmg_path}")
                print()
                print("üîß –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏:")
                print("   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞")
                print("   ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
                print("   ‚úÖ –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")
                print("   ‚úÖ PyWebView GUI")
                print("   ‚úÖ Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä")
                print("   ‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
                print("   ‚úÖ DMG –∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä")
                print("   ‚úÖ –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            else:
                print("‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ DMG –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è")
                print("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–∞–ø–∫–µ dist/")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .app –±–∞–Ω–¥–ª–∞")
            sys.exit(1)
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏")
        sys.exit(1)

if __name__ == "__main__":
    main() 