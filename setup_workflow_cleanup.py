#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ workflow runs
"""

import os
import requests
import json

def setup_workflow_cleanup():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É workflow runs"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    repo_owner = "kureinmaxim"
    repo_name = "vpn-server-manager"
    
    # –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.environ.get('GITHUB_TOKEN')
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é GITHUB_TOKEN")
        print("–ü—Ä–∏–º–µ—Ä: export GITHUB_TOKEN=your_token_here")
        return
    
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json'
    }
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏
    cleanup_settings = {
        "enabled": True,
        "retention_days": 1,  # –•—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ 1 –¥–µ–Ω—å
        "limit": 1  # –ú–∞–∫—Å–∏–º—É–º 1 workflow run
    }
    
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö workflow
        workflows_url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/actions/workflows"
        response = requests.get(workflows_url, headers=headers)
        response.raise_for_status()
        
        workflows = response.json()['workflows']
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(workflows)} workflows")
        
        for workflow in workflows:
            workflow_id = workflow['id']
            workflow_name = workflow['name']
            
            # URL –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏
            cleanup_url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/actions/workflows/{workflow_id}/timing"
            
            cleanup_response = requests.put(cleanup_url, headers=headers, json=cleanup_settings)
            
            if cleanup_response.status_code == 200:
                print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è workflow: {workflow_name}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è {workflow_name}: {cleanup_response.status_code}")
        
        print("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üìù –¢–µ–ø–µ—Ä—å —Å—Ç–∞—Ä—ã–µ workflow runs –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
    except KeyError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}")

if __name__ == "__main__":
    print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ workflow runs...")
    setup_workflow_cleanup() 