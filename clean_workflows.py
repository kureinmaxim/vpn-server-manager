#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö workflow runs –≤ GitHub Actions
"""

import os
import requests
import json
from datetime import datetime, timedelta

def clean_workflow_runs():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ workflow runs"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    repo_owner = "kureinmaxim"
    repo_name = "vpn-server-manager"
    
    # –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.environ.get('GITHUB_TOKEN')
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é GITHUB_TOKEN")
        print("–ü—Ä–∏–º–µ—Ä: export GITHUB_TOKEN=your_token_here")
        return
    
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è workflow runs
    url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/actions/runs"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ workflow runs
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        
        runs = response.json()['workflow_runs']
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(runs)} workflow runs")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—É–¥–∞—á–Ω—ã–µ runs —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
        cutoff_time = datetime.now() - timedelta(hours=1)
        failed_runs = []
        
        for run in runs:
            if run['conclusion'] == 'failure':
                created_at = datetime.fromisoformat(run['created_at'].replace('Z', '+00:00'))
                if created_at < cutoff_time:
                    failed_runs.append(run)
        
        print(f"üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(failed_runs)} —Å—Ç–∞—Ä—ã—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö runs –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ runs
        deleted_count = 0
        for run in failed_runs:
            delete_url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/actions/runs/{run['id']}"
            delete_response = requests.delete(delete_url, headers=headers)
            
            if delete_response.status_code == 204:
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω run #{run['id']} ({run['name']})")
                deleted_count += 1
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è run #{run['id']}: {delete_response.status_code}")
        
        print(f"üéâ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö workflow runs")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
    except KeyError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}")

if __name__ == "__main__":
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö workflow runs...")
    clean_workflow_runs() 